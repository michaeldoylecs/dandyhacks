#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('dandyhacks:server');
const http = require('http');
const CryptoJS = require('crypto-js')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
 * MongoDB setup
 */

/*
const mongoose = require('mongoose');
const UserModel = require('../models/userModel.js');

const dbUrl = 'mongodb://testing.michaeldoylecs.com:27017';
const dbName = 'daddyhack';

mongoose.connect(`${dbUrl}/${dbName}`, { useNewUrlParser: true });
mongoose.Promise = global.Promise;
const db = mongoose.connection;

db.on('error', console.error.bind(console, 'MongoDB connection error:'));
*/

/**
 * Create Socket.io Server
 */

const io = require('socket.io')(server);
const MessageQueue = require('../src/messageQueue.js');

const messageQueue = new MessageQueue();

io.on('connection', (socket) => {
  // Client sends a message
  socket.on('send_message', (message, sender, recipient) => {
    // const cyphertext = CryptoJS.AES.encrypt(message, 'my key');
    // const bytes = CryptoJS.AES.decrypt(cyphertext.toString(), 'my key');
    // const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    messageQueue.addMessage(message, sender, recipient);
    console.log(`'${sender}' sent '${message}' to '${recipient}'`);
    console.log(messageQueue.getAllMessages(recipient));
  });

  // Client requests all messages
  socket.on('request_all_message', (user) => {
    const messages = messageQueue.popAllMessages(user);
    socket.emit('send_message_array', messages);
  });

  // Client requests their next message
  socket.on('request_message', (user) => {
    const message = messageQueue.popMessage(user);
    socket.emit('send_message', message);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
